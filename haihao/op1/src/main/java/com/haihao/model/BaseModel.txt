package com.haihao.model;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map;

import com.haihao.tool.ToolString;
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.Table;
import com.jfinal.plugin.activerecord.TableMapping;

public class BaseModel<M extends Model<M>> extends Model<M> {
	
	private static final long serialVersionUID = 1L;
	
	private Class<? extends BaseModel<M>> clazz;
	
	@SuppressWarnings("unchecked")
	public BaseModel() {
		Type genericSuperclass = getClass().getGenericSuperclass();
		clazz = (Class<? extends BaseModel<M>>) ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];
	}
	
	public void putForUpdate(Map<String, Object> u){
		for (String key : u.keySet()) {
			this.set(key, u.get(key));
		}
	}
	
	private Table getTable() {
		return TableMapping.me().getTable(getUsefulClass());
	}
	
	public boolean isNew(){
		Table table = getTable();
		String[] primaryKey = table.getPrimaryKey();
		for(String key : primaryKey){
			if(!ToolString.isEmptyString(get(key))){
				return false;
			}
		}
		return true;
	}
	
	private Class<? extends Model> getUsefulClass() {
		Class c = getClass();
		return c.getName().indexOf("EnhancerByCGLIB") == -1 ? c : c.getSuperclass();	// com.demo.blog.Blog$$EnhancerByCGLIB$$69a17158
	}

}
