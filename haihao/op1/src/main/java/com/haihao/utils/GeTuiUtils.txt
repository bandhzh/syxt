package com.haihao.utils;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gexin.rp.sdk.base.IPushResult;
import com.gexin.rp.sdk.base.impl.ListMessage;
import com.gexin.rp.sdk.base.impl.SingleMessage;
import com.gexin.rp.sdk.base.impl.Target;
import com.gexin.rp.sdk.exceptions.RequestException;
import com.gexin.rp.sdk.http.IGtPush;
import com.gexin.rp.sdk.template.NotificationTemplate;
import com.gexin.rp.sdk.template.style.Style0;

public abstract class GeTuiUtils {

	private final static Logger logger = LoggerFactory.getLogger(GeTuiUtils.class);

	private static String appId = "YOmQdoW6rE7mHzWX6WjtR1";

	private static String appKey = "pMmR4omb9g7k2ZSk4TN0p";

	private static String auth_token = "crHQ2InOQm5go8ZodpNOa9";

	private static String host = "http://sdk.open.api.igexin.com/apiex.htm";

	private static String masterSecret = "rI3t2xT7mh8kpT8MSNiav9";

	private static IGtPush push = new IGtPush(host, appKey, masterSecret);

	/**
	 * 前段存储:var info = plus.push.getClientInfo(); info.clientid 这个属性和用户绑定
	 * @param cid
	 * @param content
	 */
	public static void send(String cid, String content) {
		SingleMessage message = new SingleMessage();
		NotificationTemplate template = new NotificationTemplate();
		// 设置APPID与APPKEY
		template.setAppId(appId);
		template.setAppkey(appKey);
		// 透传消息设置，1为强制启动应用，客户端接收到消息后就会立即启动应用；2为等待应用启动
		template.setTransmissionType(1);
		template.setTransmissionContent("请输入您要透传的内容");
		// 设置定时展示时间
		// template.setDuration("2015-01-16 11:40:00", "2015-01-16 12:24:00");

		Style0 style = new Style0();
		// 设置通知栏标题与内容
		style.setTitle("请输入通知栏标题");
		style.setText("请输入通知栏内容");
		// 配置通知栏图标
		style.setLogo("icon.png");
		// 配置通知栏网络图标
		style.setLogoUrl("");
		// 设置通知是否响铃，震动，或者可清除
		style.setRing(true);
		style.setVibrate(true);
		style.setClearable(true);
		template.setStyle(style);
		message.setData(template);

		Target target = new Target();
		target.setAppId(appId);
		target.setClientId(cid);

		IPushResult ret = null;
		try {
			ret = push.pushMessageToSingle(message, target);
		} catch (RequestException e) {
			e.printStackTrace();
			ret = push.pushMessageToSingle(message, target, e.getRequestId());
		}
		if (ret != null) {
			System.out.println(ret.getResponse().toString());
		} else {
			System.out.println("服务器响应异常");
		}

	}

}
