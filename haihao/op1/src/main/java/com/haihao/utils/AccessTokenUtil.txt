package com.haihao.utils;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.haihao.model.baoliao.AccessTokenCustom;
import com.haihao.model.baoliao.AccessUserInfo;


/**
 *   网页授权 
 * @author Administrator
 *
 */
public class AccessTokenUtil {
    
   //设置第三方用户唯一凭证 
	static  String appId = WeixinStaticUtils.appId;
   // 第三方用户唯一凭证密钥  
	static  String appSecret = WeixinStaticUtils.appSecret;
	
    private static Logger log = LoggerFactory.getLogger(AccessTokenUtil.class);  
	
	private static final String ACCESS_TOKEN_URL="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code";
	
	//获取access_token
	public static AccessTokenCustom getAccessToken(String code){
		
		
		AccessTokenCustom accessTokenCustom = null;  
		      
	        String requestUrl = ACCESS_TOKEN_URL.replace("APPID", appId).replace("SECRET", appSecret).replace("CODE", code);  
	        
	        JSONObject jsonObject = httpRequest(requestUrl, "GET", null);  
	        // 如果请求成功   
	       if (null != jsonObject) {  
	            try {  
	            	accessTokenCustom = new AccessTokenCustom(); 
	            	accessTokenCustom.setAccessToken(jsonObject.getString("access_token"));
	            	accessTokenCustom.setExpiresIn(jsonObject.getInt("expires_in"));
	            	accessTokenCustom.setRefreshToken(jsonObject.getString("refresh_token"));
	            	accessTokenCustom.setOpenId(jsonObject.getString("openid"));
	            	accessTokenCustom.setScope(jsonObject.getString("scope"));
	            	         	
	            } catch (Exception e) {  
	            	accessTokenCustom = null;
	            	e.printStackTrace();
	                // 获取token失败   
	                log.error("获取token失败 errcode:{} errmsg:{}", jsonObject.getString("errcode"), jsonObject.getString("errmsg"));  
	            }  
	        }  
	        return accessTokenCustom; 
			
	}
	
	
	private static final String ACCESS_USERINFO_URL="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN";
	
	
	//获取用户的信息
	public static AccessUserInfo geAccesstUserInfo(String accessToken,String oppenId){
				
		
		    AccessUserInfo accessUserInfo = null;  
		      
	        String requestUrl = ACCESS_USERINFO_URL.replace("ACCESS_TOKEN", accessToken).replace("OPENID", oppenId);  
	        
	        JSONObject jsonObject = httpRequest(requestUrl, "GET", null);  
	        // 如果请求成功   
	       if (null != jsonObject) {  
	            try {  
	            	accessUserInfo = new AccessUserInfo(); 
	            	accessUserInfo.setOpenId(jsonObject.getString("openid"));
	            	accessUserInfo.setNickName(jsonObject.getString("nickname"));
	            	accessUserInfo.setSex(jsonObject.getString("sex"));
	            	accessUserInfo.setProvince(jsonObject.getString("province"));
	            	accessUserInfo.setCity(jsonObject.getString("city"));
	            	accessUserInfo.setCountry(jsonObject.getString("country"));
	            	accessUserInfo.setHeadimgurl(jsonObject.getString("headimgurl"));
	            	accessUserInfo.setPrivilege(jsonObject.getJSONArray("privilege"));	            	
	            	if(jsonObject.containsKey("unionid")){
	            		accessUserInfo.setUnionid(jsonObject.getString("unionid"));
	            	}    
	                 	         	
	            } catch (Exception e) {  
	            	accessUserInfo = null;
	            	e.printStackTrace();
	                // 获取token失败   
	                log.error("获取token失败 errcode:{} errmsg:{}", jsonObject.getString("errcode"), jsonObject.getString("errmsg"));  
	            }  
	        }  
	        return accessUserInfo; 		
		
	}
	
	  //获取url的内容
	   public static JSONObject httpRequest(String requestUrl,String requestMethod, String outputStr) {  
	        JSONObject jsonObject = null;  
	        System.out.println(requestUrl);
	        StringBuffer buffer = new StringBuffer();  
	        try {  
	            // 创建SSLContext对象，并使用我们指定的信任管理器初始化   
	            TrustManager[] tm = { new MyX509TrustManager() };  
	            SSLContext sslContext = SSLContext.getInstance("SSL", "SunJSSE");  
	            sslContext.init(null, tm, new java.security.SecureRandom());  
	            // 从上述SSLContext对象中得到SSLSocketFactory对象   
	            SSLSocketFactory ssf = sslContext.getSocketFactory();  
	  
	            URL url = new URL(requestUrl);  
	            HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();  
	            httpUrlConn.setSSLSocketFactory(ssf);  
	  
	            httpUrlConn.setDoOutput(true);  
	            httpUrlConn.setDoInput(true);  
	            httpUrlConn.setUseCaches(false);  
	            // 设置请求方式（GET/POST）   
	            httpUrlConn.setRequestMethod(requestMethod);  
	  
	            if ("GET".equalsIgnoreCase(requestMethod))  
	                httpUrlConn.connect();  
	  
	            // 当有数据需要提交时   
	            if (null != outputStr) {  
	                OutputStream outputStream = httpUrlConn.getOutputStream();  
	                // 注意编码格式，防止中文乱码   
	                outputStream.write(outputStr.getBytes("UTF-8"));  
	                outputStream.close();  
	            }  
	  
	            // 将返回的输入流转换成字符串   
	            InputStream inputStream = httpUrlConn.getInputStream();  
	            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");  
	            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  
	  
	            String str = null;  
	            while ((str = bufferedReader.readLine()) != null) {  
	                buffer.append(str);  
	            }  
	            bufferedReader.close();  
	            inputStreamReader.close();  
	            // 释放资源   
	            inputStream.close();  
	            inputStream = null;  
	            httpUrlConn.disconnect();  
	            jsonObject = JSONObject.fromObject(buffer.toString());  
	        } catch (ConnectException ce) {
	            log.error("Weixin server connection timed out.");  
	        } catch (Exception e) {  
	            log.error("https request error:{}", e);  
	        }  
	        
	        System.out.println(jsonObject);
	        
	        return jsonObject;  
	    } 
}
