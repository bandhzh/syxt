package com.haihao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.haihao.constant.DataConstant;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
// 开启security注解
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Autowired
	@Qualifier("userDetailsServiceImpl")
	UserDetailsService userDetailsServiceImpl;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		http.headers().frameOptions().disable().and()
				.authorizeRequests()
				//.antMatchers("/phoneui/**").permitAll()
				.antMatchers("/phoneui","/phoneui/","/phoneui/index","/phoneui/ajaxLoginCheck").permitAll()
				.anyRequest().authenticated()
				.and().csrf().disable()
                .formLogin().loginPage("/login").permitAll().failureUrl("/login?error=true")
				.permitAll().defaultSuccessUrl("/opinion", true).and().logout()
				.logoutUrl("/logout").permitAll().invalidateHttpSession(true).and().sessionManagement()
				.maximumSessions(1).expiredUrl("/expired").and().and()
				.exceptionHandling().accessDeniedPage("/accessDenied");
	}
	
	@Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/static/**","/**/favicon.ico","/ueditor/upload");
        
    }
	
	 @Override
	 public void configure(AuthenticationManagerBuilder auth) throws Exception {
	     auth.userDetailsService(userDetailsServiceImpl).passwordEncoder(new BCryptPasswordEncoder(DataConstant.BCryptPasswordEncoderStrength));
	 }
	 
	 
	
	

}
