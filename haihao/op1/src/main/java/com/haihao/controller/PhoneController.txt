package com.haihao.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.haihao.beetl.ToolSqlXml;
import com.haihao.constant.DataConstant;
import com.haihao.dto.ImTeamDto;
import com.haihao.dto.PageResultDto;
import com.haihao.dto.PageSqlCommond;
import com.haihao.dto.ResultDto;
import com.haihao.dto.SQLCallback;
import com.haihao.dto.SecurityUser;
import com.haihao.dto.UserDto;
import com.haihao.jfinal.ModelKit;
import com.haihao.jfinal.ToolModel;
import com.haihao.model.baoliao.AccessUserInfo;
import com.haihao.model.baoliao.BaoliaoModel;
import com.haihao.model.group.MSTaoLunZu;
import com.haihao.model.group.MSTaoLunZuUsers;
import com.haihao.model.im.ImService;
import com.haihao.model.mashang.MaShangeModel;
import com.haihao.model.news.NewsModel;
import com.haihao.model.opinion.OpinionModel;
import com.haihao.model.security.PrivilegeModel;
import com.haihao.model.security.RoleModel;
import com.haihao.model.security.UserModel;
import com.haihao.tool.ToolSecurity;
import com.haihao.tool.ToolString;
import com.haihao.utils.GeTuiUtils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Record;

/**
 * 移动端APP UI控制器
 * @author Administrator
 *
 */

@Controller
@RequestMapping(value = "/phoneui")
public class PhoneController extends BaseController{
	
	
	@Autowired
	private ImService imServiceImpl;
	
	
	@RequestMapping(value = { "", "/", "/index" })
	public String index(Map<String, Object> model,HttpServletRequest request) {
		String parameter = request.getParameter("gtCientid");
		if(!ToolString.isEmptyString(parameter)){
			GeTuiUtils.send(parameter, "登录推送消息");
		}
		return "phoneui/login";
	}
	
	private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(DataConstant.BCryptPasswordEncoderStrength);
	
	@RequestMapping("/ajaxLoginCheck")
	@ResponseBody
	public ResultDto ajaxLoginCheck(Map<String, Object> map,HttpServletRequest request,HttpSession session){
		ResultDto resultDto = new ResultDto();
		
		String loginName = request.getParameter("loginName");
		String password = request.getParameter("password");
		try{
			if (StringUtils.isBlank(loginName)) {
				throw new UsernameNotFoundException("用户名为空");
			}
			UserModel byLoginName = UserModel.dao.getByLoginName(loginName);
			if (null == byLoginName)
				throw new UsernameNotFoundException("用户不存在");
			if (byLoginName.getInt("enable").intValue() == 0) {
				throw new UsernameNotFoundException("该用户已被禁用");
			}
			
			boolean matches = passwordEncoder.matches(password, byLoginName.getStr("password"));
			if(!matches){
				throw new UsernameNotFoundException("账号或密码错误");
			}
			
			Set<GrantedAuthority> authorities = new HashSet<>();
			authorities.add(new SimpleGrantedAuthority("ROLE_COMM"));
			List<PrivilegeModel> rolePrivilege = RoleModel.dao.getRolePrivilege(byLoginName.getLong("roleId"));
			rolePrivilege.forEach(r -> authorities.add(new SimpleGrantedAuthority("ROLE_" + r.getStr("menuCode") + "_" + r.getStr("acl"))));
			
			SecurityUser securityUser = new SecurityUser();
			UserDto userDto = new UserDto();
			userDto.setLoginName(loginName);
			userDto.setPassword(byLoginName.getStr("password"));
			userDto.setMobile(byLoginName.getStr("mobile"));
			userDto.setDepartmentId(byLoginName.getLong("departmentId"));
			userDto.setGender(byLoginName.getInt("gender"));
			userDto.setListSimpleGrantedAuthority(authorities.toArray(new SimpleGrantedAuthority[0]));
			userDto.setDisplayName(byLoginName.getStr("displayName"));
			userDto.setRoleId(byLoginName.getLong("roleId"));
			userDto.setUserId(byLoginName.getLong("id"));
			userDto.setImAccountId(byLoginName.getStr("imAccountId"));
			userDto.setImToken(byLoginName.getStr("imToken"));
			securityUser.setUserDto(userDto);
			UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(securityUser, password, authorities);
			ToolSecurity.addSecurityUser(usernamePasswordAuthenticationToken);
			
			//session.setAttribute("userDto", userDto);
			
			
			
		}catch(Exception e){
			e.printStackTrace();
			resultDto.setSuccess(false);
			resultDto.setData(e.getMessage());
		}
		return resultDto;
	}
	
	
	
	

	/**
	 * 设置手势密码
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/locker"})
	public String locker(Map<String, Object> model) {
		
		return "phoneui/locker";
	}
	
	/**
	 * 异步保存手势密码
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxaddgesture")
	@ResponseBody
	public ResultDto ajaxaddgesture(HttpServletRequest request) {
		ResultDto resultDto = new ResultDto();
		
		SecurityUser getSecurityUser = ToolSecurity.getSecurityUser();
		UserModel model = UserModel.dao.findById(getSecurityUser.getUserDto().getUserId());
		String gesture= request.getParameter("gesture");//手势密码
		
		String imei= request.getParameter("imei");//设备标识
		model.set("imei", imei);
		model.set("gesture", gesture);
		model.update();
	
		return resultDto;
		
		
		
	}
	
	
	@RequestMapping("/ajaxcheckimei")
	@ResponseBody
	public ResultDto ajaxcheckimei(HttpServletRequest request) {
		ResultDto resultDto = new ResultDto();
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		String imei= request.getParameter("imei");//设备标识
		UserModel model = UserModel.dao.findFirst(ToolSqlXml.getSql("com.user.getByimei"),imei);
		
		
		if(null==model){
			resultDto.setSuccess(false);
		}else{
			resultDto.setSuccess(true);
		}
	
	
		return resultDto;
	}
	
	
	
	
	/**
	 * 解锁界面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/unlock"})
	public String unlock(Map<String, Object> model,HttpServletRequest request) {
		
		String imei= request.getParameter("imei");//设备标识
		UserModel usermodel = UserModel.dao.findFirst(ToolSqlXml.getSql("com.user.getByimei"),imei);
		model.put("usermodel", ModelKit.toMap(usermodel));
		
		return "phoneui/unlock";
	}
	
	
	/**
	 * 手势密码 解锁
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxLoginCheckgesture")
	@ResponseBody
	public ResultDto ajaxLoginCheckgesture(HttpServletRequest request){
		ResultDto resultDto = new ResultDto();
		String gesture = request.getParameter("gesture");
		//String password = request.getParameter("password");
		try{
			if (StringUtils.isBlank(gesture)) {
				throw new UsernameNotFoundException("用户名为空");
			}
			UserModel byLoginName = UserModel.dao.getBygesture(gesture);
			if (null == byLoginName)
				throw new UsernameNotFoundException("用户不存在");
			if (byLoginName.getInt("enable").intValue() == 0) {
				throw new UsernameNotFoundException("该用户已被禁用");
			}
			
		
			
			Set<GrantedAuthority> authorities = new HashSet<>();
			authorities.add(new SimpleGrantedAuthority("ROLE_COMM"));
			List<PrivilegeModel> rolePrivilege = RoleModel.dao.getRolePrivilege(byLoginName.getLong("roleId"));
			rolePrivilege.forEach(r -> authorities.add(new SimpleGrantedAuthority("ROLE_" + r.getStr("menuCode") + "_" + r.getStr("acl"))));
			
			SecurityUser securityUser = new SecurityUser();
			UserDto userDto = new UserDto();
			userDto.setLoginName(byLoginName.getStr("loginName"));
			userDto.setPassword(byLoginName.getStr("password"));
			userDto.setMobile(byLoginName.getStr("mobile"));
			userDto.setDepartmentId(byLoginName.getLong("departmentId"));
			userDto.setGender(byLoginName.getInt("gender"));
			userDto.setListSimpleGrantedAuthority(authorities.toArray(new SimpleGrantedAuthority[0]));
			userDto.setDisplayName(byLoginName.getStr("displayName"));
			userDto.setRoleId(byLoginName.getLong("roleId"));
			userDto.setUserId(byLoginName.getLong("id"));
			securityUser.setUserDto(userDto);
			UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(securityUser, byLoginName.get("password"), authorities);
			ToolSecurity.addSecurityUser(usernamePasswordAuthenticationToken);
		}catch(Exception e){
			e.printStackTrace();
			resultDto.setSuccess(false);
			resultDto.setData(e.getMessage());
		}
		return resultDto;
	}
	
	
	
	
	
	/**
	 * app 用户中心界面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/usercenter"})
	public String usercenter(Map<String, Object> model,HttpSession session) {
		
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		SecurityUser principal = (SecurityUser) authentication.getPrincipal();
		model.put("userDto", principal.getUserDto());

		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find(ToolSqlXml.getSql("com.label.role"));
		map.put("roles", ToolModel.recordListConvert(find));

		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));

		model.put("initData", JSON.toJSONString(map));
		
		
		return "phoneui/usercenter";
	}
	
	/**
	 * app 统计中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/stat"})
	public String stat(Map<String, Object> model) {
		
		
		return "phoneui/stat";
	}
	
	
	/**
	 * app 新闻中心 默认第一版式 列表模式
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/listnews"})
	public String listnews(Map<String, Object> model) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));
		map.put("lists", ToolModel.recordListConvert(types));
		
		
		List<Record> opennews = Db.find(ToolSqlXml.getSql("com.news.selectisPublic"));//开放的舆情
		map.put("listopennews", ToolModel.recordListConvert(opennews));
		
		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));
		
		model.put("initData", JSON.toJSONString(map));
		
		
		return "phoneui/listnews";
	}
	
	
	/**
	 * app 新闻中心 默认第三版式 块级版式
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/listnewsblock"})
	public String listnewsblock2(Map<String, Object> model) {
		
		

		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		
		List<Record> opennews = Db.find(ToolSqlXml.getSql("com.news.selectisPublic"));//开放的新闻
		map.put("listopennews", ToolModel.recordListConvert(opennews));
		
		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));
		
		model.put("initData", JSON.toJSONString(map));
		
		
		return "phoneui/listnewsblock";
	}
	
	
	/**
	 * 异步获取新闻核实列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistNewsByVerify")
	@ResponseBody
	public PageResultDto ajaxlistNewsByVerify(HttpServletRequest request) {
		
		
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.news.selectBodyByVerify");
		pageSqlCommond.setHeadSql("com.news.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	/**
	 * 异步获取新闻转办列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistNewsByTodo")
	@ResponseBody
	public PageResultDto ajaxlistNewsByTodo(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.news.selectBodyByTodo");
		pageSqlCommond.setHeadSql("com.news.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	/**
	 * 异步获取 批示给我的舆情列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistNewsByInstruction")
	@ResponseBody
	public PageResultDto ajaxlistNewsByInstruction(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.news.selectBodyByInstruction");
		pageSqlCommond.setHeadSql("com.news.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	
	/**
	 * app 舆情中心 列表版式
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/listopinions"})
	public String listopinions(Map<String, Object> model,HttpServletRequest request) {
		
		//加载已公开的舆情
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));
		map.put("lists", ToolModel.recordListConvert(types));
		
		
		List<Record> opennews = Db.find(ToolSqlXml.getSql("com.opinion.selectisPublic"));//开放的舆情
		map.put("listopennews", ToolModel.recordListConvert(opennews));
		
		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));
		
		//+需要自己处理的核实 以及转办给我的舆情
		
		model.put("initData", JSON.toJSONString(map));
				
		
		return "phoneui/listopinions";
	}
	
	
	/**
	 * 异步获取舆情核实列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistOpinionByVerify")
	@ResponseBody
	public PageResultDto ajaxlistOpinionByVerify(HttpServletRequest request) {
		
		
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.opinion.selectBodyByVerify");
		pageSqlCommond.setHeadSql("com.opinion.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	/**
	 * 异步获取舆情转办列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistOpinionByTodo")
	@ResponseBody
	public PageResultDto ajaxlistOpinionByTodo(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.opinion.selectBodyByTodo");
		pageSqlCommond.setHeadSql("com.opinion.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	/**
	 * 异步获取 批示给我的舆情列表
	 * @param request
	 * @return
	 */
	@RequestMapping("/ajaxlistOpinionByInstruction")
	@ResponseBody
	public PageResultDto ajaxlistOpinionByInstruction(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.opinion.selectBodyByInstruction");
		pageSqlCommond.setHeadSql("com.opinion.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	
	/**
	 * app 舆情中心 默认第三版式 块级版式
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/listopinionsblock"})
	public String listopinionsblock(Map<String, Object> model) {
		
		//加载已公开的舆情
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		
		List<Record> opennews = Db.find(ToolSqlXml.getSql("com.opinion.selectisPublic"));//开放的舆论
		map.put("listopennews", ToolModel.recordListConvert(opennews));
		
		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));
		
		model.put("initData", JSON.toJSONString(map));
		
		
		return "phoneui/listopinionsblock";
	}
	
	
	
	/**
	 * 进入舆情详细
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/opinionsinfo"})
	public String opinionsinfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		OpinionModel opinionmodel = OpinionModel.dao.findById(bid);
		model.put("opinionmodel", ModelKit.toMap(opinionmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "phoneui/opinionsinfo";
	}
	
	
	/**
	 * 进入舆情核实界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/opinionsheshiinfo"})
	public String opinionsheshiinfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		OpinionModel opinionmodel = OpinionModel.dao.findById(bid);
		model.put("opinionmodel", ModelKit.toMap(opinionmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "opinionui/opinionsheshiinfo";
	}
	
	
	/**
	 * 进入舆情转办处理界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/opinionszhuanbaninfo"})
	public String opinionszhuanbaninfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		OpinionModel opinionmodel = OpinionModel.dao.findById(bid);
		model.put("opinionmodel", ModelKit.toMap(opinionmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "opinionui/opinionszhuanbaninfo";
	}
	
	
	/**
	 * 进入舆情跟踪界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/opinionspishiinfo"})
	public String opinionspishiinfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		OpinionModel opinionmodel = OpinionModel.dao.findById(bid);
		model.put("opinionmodel", ModelKit.toMap(opinionmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "opinionui/opinionspishiinfo";
	}
	
	
	
	
	/**
	 * 进入转办操作界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/opinionszhuanban"})
	public String opinionszhuanban(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		OpinionModel opinionmodel = OpinionModel.dao.findById(bid);
		model.put("opinionmodel", ModelKit.toMap(opinionmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "phoneui/opinionszhuanban";
	}
	
	
	
	
	
	
	
	
	
	/**
	 * app 新闻详情
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/newsinfo"})
	public String newsinfo(Map<String, Object> model,HttpServletRequest request) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		NewsModel newsmodel = NewsModel.dao.findById(bid);
		model.put("newsmodel", ModelKit.toMap(newsmodel));
		
		
		model.put("initData", JSON.toJSONString(map));
		
		
		return "newsui/newsinfo";
	}
	
	
	/**
	 * app 马上办详情
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/mashanginfo"})
	public String mashanginfo(Map<String, Object> model,HttpServletRequest request) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int mid = Integer.parseInt(request.getParameter("mid"));
		MaShangeModel mashangmodel = MaShangeModel.dao.findById(mid);
		model.put("newsmodel", ModelKit.toMap(mashangmodel));
		
		
		model.put("initData", JSON.toJSONString(map));
		
		
		return "mashangui/mashanginfo";
	}
	
	
	
	/**
	 * 进入转办操作界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/newszhuanban"})
	public String newszhuanban(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		NewsModel newsmodel = NewsModel.dao.findById(bid);
		model.put("newsmodel", ModelKit.toMap(newsmodel));
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "newsui/newszhuanban";
	}
	
	
	
	@RequestMapping(value = { "/newsheshiinfo"})
	public String newsheshiinfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		NewsModel newsmodel = NewsModel.dao.findById(bid);
		model.put("newsmodel", ModelKit.toMap(newsmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "newsui/newsheshiinfo";
	}
	
	/**
	 * 进入新闻处理界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/newszhuanbaninfo"})
	public String newszhuanbaninfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		NewsModel newsmodel = NewsModel.dao.findById(bid);
		model.put("newsmodel", ModelKit.toMap(newsmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "newsui/newszhuanbaninfo";
	}
	
	
	/**
	 * 进入 批示给我的新闻界面
	 * @param model
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping(value = { "/newspishiinfo"})
	public String newspishiinfo(Map<String, Object> model,HttpServletRequest request,HttpSession session) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		List<Record> types = Db.find(ToolSqlXml.getSql("com.label.list"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		
		List<Record> find1 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find1));

		int bid = Integer.parseInt(request.getParameter("id"));
		NewsModel newsmodel = NewsModel.dao.findById(bid);
		model.put("newsmodel", ModelKit.toMap(newsmodel));
		
		
		
		
		model.put("initData", JSON.toJSONString(map));
		
		return "newsui/newspishiinfo";
	}
	
	
	
	/**
	 * app 消息中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/message"})
	public String message(Map<String, Object> model) {
		
		
		return "phoneui/message";
	}
	
	
	
	/**
	 * app 马上办中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/tomashangeCenter"})
	public String tomashangeCenter(Map<String, Object> model) {
		
		
		return "mashangui/mashangcenter";
	}
	
	
	
	/**
	 * app 待办事项中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/todolist"})
	public String todolist(Map<String, Object> model) {
		
		
		return "phoneui/todolist";
	}
	
	
	/**
	 * app 群组列表
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/listgroups"})
	public String listgroups(Map<String, Object> model) {
		
		
		
		//根据当前用户 检索出当前用户所有的套路组
	    	
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("userid", ToolSecurity.getUserId());//accessUserInfo.getOpenId()
		
		List<Record> listusers = Db.find(ToolSqlXml.getSql("com.group.selecttaolunzusbyuserid",map));//处理中
		map.put("listusers", ToolModel.recordListConvert(listusers));
		
		
		model.put("initData", JSON.toJSONString(map));
		
		
		
		return "phoneui/listgroups";
	}
	
	
	/**
	 * 根据讨论组id转换为讨论组名称
	 * @param request
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/ajaxgettlznamebyid")
	@ResponseBody
	public ResultDto ajaxgettlznamebyid(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		ResultDto resultDto = new ResultDto();
		int tlzid = Integer.parseInt(request.getParameter("tlzid"));
		MSTaoLunZu taolunzu = MSTaoLunZu.dao.findById(tlzid);
		
		resultDto.setData( ModelKit.toMap(taolunzu));
			
		
	
		return resultDto;
		
	
	}
	
	
	/**
	 * 根据用户id转换为昵称
	 * @param request
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/ajaxgetusernamebyid")
	@ResponseBody
	public ResultDto ajaxgetusernamebyid(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		ResultDto resultDto = new ResultDto();
		int userid = Integer.parseInt(request.getParameter("userid"));
		
		
		UserModel usermodel = UserModel.dao.findById(userid);
		
		resultDto.setData( ModelKit.toMap(usermodel));
			
		
	
		return resultDto;
		
	
	}
	
	
	/**
	 * 异步删除讨论组成员
	 * @param request
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/ajaxdeletechengyuan")
	@ResponseBody
	public ResultDto ajaxdeletechengyuan(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		ResultDto resultDto = new ResultDto();
		int uid = Integer.parseInt(request.getParameter("uid"));
		
		MSTaoLunZuUsers tlzuser = MSTaoLunZuUsers.dao.findById(uid);
		tlzuser.set("enabled", -1);
		
		tlzuser.update();
		
		
		resultDto.setSuccess(true);
		resultDto.setData( ModelKit.toMap(tlzuser));
			
		
	
		return resultDto;
		
	
	}
	
	/**
	 * 异步添加新成员
	 * @param request
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping("/ajaxeditchengyuans")
	@ResponseBody
	public ResultDto ajaxeditchengyuans(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		ResultDto resultDto = new ResultDto();
		
		
		String tlzid = request.getParameter("tlzid");
		String userid = request.getParameter("userid");
		//根据用户id 以及讨论组id检索是否已经存在
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("taolunzuid", tlzid);
		map.put("userid", userid);
		
		
		List<Record> opennews =  Db.find(ToolSqlXml.getSql("com.group.selectchengyuanbyuidtid",map));
		
		if(null==opennews||opennews.size()==0){//没有查询到值
			//新增进去
			
			MSTaoLunZuUsers tlzuser = new MSTaoLunZuUsers();
			tlzuser.set("taolunzuid", tlzid);
			tlzuser.set("userid", userid);
			tlzuser.set("enabled", 1);
			tlzuser.save();
			resultDto.setSuccess(true);
		}else{
			resultDto.setSuccess(false);
		}
		
	
		return resultDto;
		
	
	}
	
	
	
	
	
	/**
	 * 进入马上办交流中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/mashanggroupcommon"})
	public String mashanggroupcommon(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find("select * from op_user where enable = 1");
		map.put("users", ToolModel.recordListConvert(find));
		model.put("initData", JSON.toJSONString(map));
		
		
		map.put("mid", request.getParameter("mid"));
		
		//根据马上办id 检索出该讨论组id
		List<Record> listbaoliaoends = Db.find(ToolSqlXml.getSql("com.mashang.selectlzidbymid",map));
//		if(null==listbaoliaoends||listbaoliaoends.size()==0){//该马上办讨论组未创建
//			
//		}
		
		Map<String, Object> taolunzu = ToolModel.recordListConvert(listbaoliaoends).get(0);
		
		model.put("tlzid", taolunzu.get("id"));
		model.put("zuname", taolunzu.get("name"));
		
		model.put("createTeam", taolunzu.get("createTeam"));
		
		return "phoneui/groupcommon";
	}
	
	
	
	
	/**
	 * 进入交流中心
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/groupcommon"})
	public String groupcommon(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find("select * from op_user where enable = 1");
		map.put("users", ToolModel.recordListConvert(find));
		model.put("initData", JSON.toJSONString(map));
		
		
		int tlzid = Integer.parseInt(request.getParameter("tlzid"));//讨论组id
		MSTaoLunZu taolunzu = MSTaoLunZu.dao.findById(tlzid);
		
		model.put("tlzid", tlzid);
		model.put("zuname", taolunzu.get("name"));
		
		model.put("createTeam", taolunzu.get("createTeam"));
		
		return "phoneui/groupcommon";
	}
	
	
	
	
	
	
	/**
	 * 修改群组成员
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/editgroup"})
	public String editgroup(HttpServletRequest request,HttpSession session,Map<String, Object> model) {
		
		
		int tlzid = Integer.parseInt(request.getParameter("tlzid"));
		MSTaoLunZu taolunzu = MSTaoLunZu.dao.findById(tlzid);
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("taolunzuid", tlzid);
		
		List<Record> listchengyuans = Db.find(ToolSqlXml.getSql("com.group.selecttaolunzusbytlzid",map));//处理完成
		map.put("listchengyuans", ToolModel.recordListConvert(listchengyuans));
		
		model.put("initData", JSON.toJSONString(map));
		model.put("taolunzuid", tlzid);
		model.put("taolunzu", taolunzu);
		
		
		
		return "phoneui/editgroup";
	}
	
	/**
	 * 新建群组成员
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/newaddgroup"})
	public String newaddgroup(Map<String, Object> model) {
		
		return "phoneui/newaddgroup";
	}
	
	/**
	 * 异步添加讨论组
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/ajaxaddmstaolunzu")
	@ResponseBody
	public ResultDto ajaxaddmstaolunzu(HttpServletRequest request,HttpSession session) {
		ResultDto resultDto = new ResultDto();
		MSTaoLunZu model = getModel(request, MSTaoLunZu.class);
		
		MSTaoLunZuUsers modelusers = getModel(request, MSTaoLunZuUsers.class);
		
		
		
		String [] userids = request.getParameter("userids").split(",");
		
		
		
		
		Db.tx(new IAtom() {//手动事务处理

			@Override
			public boolean run() throws SQLException {
				if (model.isNew()) {
					model.set("name", request.getParameter("tlzname"));
					model.set("mid",  request.getParameter("mid"));//马上办舆情id
					model.set("mainImg", request.getParameter("mainImg"));
					model.set("enabled", 1);
					model.set("createdDate", System.currentTimeMillis());
					model.set("createdBy", ToolSecurity.getUserId());
					model.save();
					
					
					if(modelusers.isNew()){
						//添加成功后将当前用户添加到成员表
						modelusers.set("userid", ToolSecurity.getUserId());
						modelusers.set("taolunzuid", model.get("id"));
						modelusers.set("enabled", 1);
						modelusers.save();
						
						//将其他用户成员也添加进去
						for(int i=0;i<userids.length;i++){
							MSTaoLunZuUsers modeluserchengyuans = new MSTaoLunZuUsers();
							System.out.println(userids[i]+"+================================");
							modeluserchengyuans.set("userid", userids[i]);
							modeluserchengyuans.set("taolunzuid", model.get("id"));
							modeluserchengyuans.set("enabled", 1);
							modeluserchengyuans.save();
						}
						
						
						
					}else{
						modelusers.update();
					}
					
					
					
				} else {
					model.update();
				}
				return true;
			}
		});
		
		
		ImTeamDto imTeamDto = new ImTeamDto();
		imTeamDto.setTname(request.getParameter("tlzname"));//im群名
		imTeamDto.setUserId(String.valueOf(ToolSecurity.getUserId()));
		//检测改组所有的成员
		List<Long> find = Db.query("select userid from op_mashang_taolunzu_users where enabled=1 and taolunzuid="+model.get("id"));
		List<String> ids = new ArrayList<String>();
		for(Long id : find){
		  if(RandomUtils.nextInt(0, 10) < 5){
		    ids.add(id.toString());
		  }
		}
		imTeamDto.setMembers(ids.toArray(new String[0]));//qun chengyuan 
		String createTeam = imServiceImpl.createTeam(imTeamDto);
		
		model.set("createTeam", createTeam);
		model.update();
		
			
		
	
		return resultDto;
		
	
	}
	
	
	/**
	 * 用户基本信息
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/userinfo"})
	public String userinfo(Map<String, Object> model) {
		
		return "phoneui/userinfo";
	}
	
	@RequestMapping(value = { "/setting"})
	public String setting(Map<String, Object> model) {
		

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		SecurityUser principal = (SecurityUser) authentication.getPrincipal();
		model.put("userDto", principal.getUserDto());

		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find(ToolSqlXml.getSql("com.label.role"));
		map.put("roles", ToolModel.recordListConvert(find));

		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));

		model.put("initData", JSON.toJSONString(map));
		
		
		return "phoneui/setting";
	}

	
	
	@RequestMapping(value = { "/ceshi"})
	public String ceshi(Map<String, Object> model) {
		
		return "phoneui/ceshi";
	}
	
	
	
	
}
