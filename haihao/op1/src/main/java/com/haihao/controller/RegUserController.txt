package com.haihao.controller;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.haihao.beetl.ToolSqlXml;
import com.haihao.dto.PageResultDto;
import com.haihao.dto.PageSqlCommond;
import com.haihao.dto.RequestDTO;
import com.haihao.dto.ResultDto;
import com.haihao.dto.SQLCallback;
import com.haihao.dto.SecurityUser;
import com.haihao.dto.SendmsDTO;
import com.haihao.jfinal.SqlXmlPlugin;
import com.haihao.jfinal.ToolModel;
import com.haihao.model.reguser.RegUserModel;
import com.haihao.utils.SMSUtils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Record;


@Controller
@RequestMapping(value = "/reguser")
public class RegUserController extends BaseController{
	
	
	/**
	 * app 登录界面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/login"})
	public String login(Map<String, Object> model,HttpServletRequest request) {
		//标记使用账号密码登录
		String state = request.getParameter("state");//状态
		
		model.put("state", state);
		
		
		return "phoneui/login";
	}
	
	/**
	 * app 注册界面
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/reg"})
	public String reg(Map<String, Object> model) {
		
		return "phoneui/reg";
	}
	
	
	
	/**
	 * 异步发送手机验证码
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/ajaxsendregCode")//, method = RequestMethod.POST
	@ResponseBody
	public ResultDto ajaxsendregCode(HttpServletRequest request,HttpSession session) {
		
		ResultDto resultDto = new ResultDto();
		RequestDTO requestDTO = getRequestDTO(request);
		Map<String, Object> data = requestDTO.getData();
		
		Object telphone = data.get("telphone");
		
		int code =1 + (int)(Math.random() * ((999999 - 1) + 1));
		
		
		logger.info(code+"验证码");
		session.setAttribute("code", code);
		
		try {
			//TimerTask实现3分钟后从session中删除code  
	        final Timer timer=new Timer();
	        timer.schedule(new TimerTask() {
	            @Override
	            public void run() {
	            	session.removeAttribute("code");
	                logger.info("code清除成功");
	                timer.cancel();
	            }
	        },3*60*1000);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		
		
		String content = "验证码为【"+code+"】，您正在注册，如非本人操作，请勿泄露。";
		
		resultDto.setData(code);
		SendmsDTO sendmsdto = new SendmsDTO();
		sendmsdto.setNumber(telphone.toString());
		sendmsdto.setContent(content);
		SMSUtils.send(sendmsdto);
		
		return resultDto;
		
	}
	
	
	/**
	 * app端用户注册
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/ajaxReguser")
	@ResponseBody
	public ResultDto ajaxReguser(HttpServletRequest request,HttpSession session) {
		ResultDto resultDto = new ResultDto();
		RegUserModel model = getModel(request, RegUserModel.class);
		
		String yzm = request.getParameter("yzm");
		
		if(session.getAttribute("code")==null){//验证码为null 或者不相同
			resultDto.setSuccess(false);
			resultDto.setError("验证码错误！");
		}else if(!session.getAttribute("code").toString().equals(yzm)){
			resultDto.setSuccess(false);
			resultDto.setError("验证码错误！");
		}else{
			
			Db.tx(new IAtom() {//手动事务处理

				@Override
				public boolean run() throws SQLException {
					if (model.isNew()) {
						model.set("mobile", request.getParameter("mobile"));
						model.set("loginName",  request.getParameter("loginName"));
						model.set("displayName",  request.getParameter("loginName"));
						model.set("password", request.getParameter("password"));
						model.set("roleId", 0);
						model.set("departmentId", 0);
						long currentTimeMillis = System.currentTimeMillis();
						model.set("createDate", currentTimeMillis);
						model.save();
						
					} else {
						model.update();
					}
					return true;
				}
			});
			
			resultDto.setSuccess(true);
			
		}
		
	
		return resultDto;
		
	
	}
	
	
	

	/**
	 * pc后台 app注册用户管理列表
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/regusermanage"})
	public String regusermanage(Map<String, Object> model) {
		model.put("htmlContent", "/templates/reguser/regusermanage.html");
		
		
//		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//		SecurityUser principal = (SecurityUser) authentication.getPrincipal();
//		model.put("userDto", principal.getUserDto());
		
		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> types = Db.find(ToolSqlXml.getSql("com.reguser.selectAll"));//报料类别
		map.put("lists", ToolModel.recordListConvert(types));
		

		List<Record> find = Db.find(ToolSqlXml.getSql("com.label.role"));
		map.put("roles", ToolModel.recordListConvert(find));

		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));

		model.put("initData", JSON.toJSONString(map));
		
		//reload sql
		SqlXmlPlugin.init(false);
		
		return "common/content";
		
	}
	
	
	
	
	@RequestMapping("/listregUser")
	@ResponseBody
	public PageResultDto listregUser(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.reguser.selectBody");
		pageSqlCommond.setHeadSql("com.reguser.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	

}
