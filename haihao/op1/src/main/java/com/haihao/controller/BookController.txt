package com.haihao.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.haihao.beetl.ToolSqlXml;
import com.haihao.dto.PageResultDto;
import com.haihao.dto.PageSqlCommond;
import com.haihao.dto.SQLCallback;
import com.haihao.dto.SecurityUser;
import com.haihao.jfinal.SqlXmlPlugin;
import com.haihao.jfinal.ToolModel;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;


@Controller
@RequestMapping(value = "/book")
public class BookController extends BaseController{
	
	/**
	 * 通讯录
	 * @param model
	 * @return
	 */
	@PreAuthorize("hasRole('user_setting')")
	@RequestMapping(value = {"/book" })
	public String index(Map<String, Object> model) {
		//model.put("htmlContent", "/templates/security/user.html");
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		SecurityUser principal = (SecurityUser) authentication.getPrincipal();
		model.put("userDto", principal.getUserDto());

		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find(ToolSqlXml.getSql("com.label.role"));
		map.put("roles", ToolModel.recordListConvert(find));

		List<Record> find2 = Db.find(ToolSqlXml.getSql("com.label.department"));
		map.put("departments", ToolModel.recordListConvert(find2));

		model.put("initData", JSON.toJSONString(map));
		
		//reload sql
		SqlXmlPlugin.init(false);

		return "book/book";
	}
	
	@RequestMapping("/ajaxlistUser")
	@ResponseBody
	public PageResultDto ajaxlistUser(HttpServletRequest request) {
		PageSqlCommond<List<Map<String, Object>>> pageSqlCommond = new PageSqlCommond<List<Map<String, Object>>>();
		pageSqlCommond.setRequest(request);
		pageSqlCommond.setBodySql("com.user.selectBody");
		pageSqlCommond.setHeadSql("com.user.selectHearder");
		pageSqlCommond.setSqlCallback(new SQLCallback<List<Map<String, Object>>>() {
			@Override
			public void onComplete(List<Map<String, Object>> data) {
			}
		});
		return ajaxList(pageSqlCommond);
	}
	
	
	
	/**
	 * 创建讨论组
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "/creategroup"})
	public String creategroup(Map<String, Object> model) {
		
		return "book/creategroup";
	}

}
