package com.haihao.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.RandomUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.haihao.dto.ImTeamDto;
import com.haihao.jfinal.ToolModel;
import com.haihao.model.im.ImService;
import com.haihao.tool.ToolSecurity;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;


@Controller
@RequestMapping(value = "/im")
public class ImController {
	
	@Autowired
	private ImService imServiceImpl;
	
	
	@RequestMapping(value = { "", "/", "/index" })
	public String index() {
		
		
		return "im/index";
	}
	
	
	@RequestMapping(value = "/test")
	public String test(Map<String, Object> model) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find("select * from op_user where enable = 1");
		map.put("users", ToolModel.recordListConvert(find));
		model.put("initData", JSON.toJSONString(map));
		return "im/test";
	}
	
	@RequestMapping(value = "/test2")
	public String test2(Map<String, Object> model) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Record> find = Db.find("select * from op_user where enable = 1");
		map.put("users", ToolModel.recordListConvert(find));
		model.put("initData", JSON.toJSONString(map));
		return "im/test2";
	}
	
	
	@RequestMapping("/addTeam")
	@ResponseBody
	public String addTeam(HttpServletRequest request){
		ImTeamDto imTeamDto = new ImTeamDto();
		imTeamDto.setTname("新的群名称+" + new Random().nextInt(99));
		imTeamDto.setUserId(String.valueOf(ToolSecurity.getUserId()));
		List<Long> find = Db.query("select id from op_user where enable = 1 and imAccountId is not null ");
		List<String> ids = new ArrayList<String>();
		for(Long id : find){
		  if(RandomUtils.nextInt(0, 10) < 5){
		    ids.add(id.toString());
		  }
		}
		imTeamDto.setMembers(ids.toArray(new String[0]));//qun chengyuan 
		String createTeam = imServiceImpl.createTeam(imTeamDto);
		return createTeam;
	}
	
	@RequestMapping("/addUserFromTeam")
	@ResponseBody
	public String addUserFromTeam(HttpServletRequest request){
		
		String teamId = request.getParameter("teamId");
		String userIds = request.getParameter("userIds");
		ImTeamDto imTeamDto = new ImTeamDto();
		imTeamDto.setUserId(String.valueOf(ToolSecurity.getUserId()));
		imTeamDto.setTeamId(teamId);
		imTeamDto.setMembers(userIds.split(","));
		imServiceImpl.addUserFromTeam(imTeamDto);
		return "";
	}
	
	
	@RequestMapping("/kickUserFromTeam")
	@ResponseBody
	public String kickUserFromTeam(HttpServletRequest request){
		
		String teamId = request.getParameter("teamId");
		String userIds = request.getParameter("userIds");
		ImTeamDto imTeamDto = new ImTeamDto();
		imTeamDto.setUserId(String.valueOf(ToolSecurity.getUserId()));
		imTeamDto.setTeamId(teamId);
		imTeamDto.setMembers(userIds.split(","));
		imServiceImpl.kickUserFromTeam(imTeamDto);
		return "";
	}

	
	
	@RequestMapping("/removeTeam")
	@ResponseBody
	public String removeTeam(HttpServletRequest request){
		String teamId = request.getParameter("teamId");
		ImTeamDto imTeamDto = new ImTeamDto();
		imTeamDto.setUserId(String.valueOf(ToolSecurity.getUserId()));
		imTeamDto.setTeamId(teamId);
		imServiceImpl.removeTeam(imTeamDto);
		return "";
	}
}
