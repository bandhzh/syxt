/**
 * Copyright (c) 2011-2013, kidzhou 周磊 (zhouleib1412@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.haihao.plugin.tablebind;

import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Lists;
import com.haihao.model.BaseModel;
import com.haihao.tool.ClassSearcher;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.ActiveRecordPlugin;
import com.jfinal.plugin.activerecord.DbKit;
import com.jfinal.plugin.activerecord.IDataSourceProvider;
import com.jfinal.plugin.activerecord.Model;

public class AutoTableBindPlugin extends ActiveRecordPlugin {

	protected final Logger log = LoggerFactory.getLogger(getClass());

	@SuppressWarnings("rawtypes")
	private List<Class<? extends Model>> excludeClasses = Lists.newArrayList();
	private List<String> includeJars = Lists.newArrayList();
	private boolean autoScan = true;
	private boolean includeAllJarsInLib = false;
	private List<String> packagesToScan = Lists.newArrayList();
	private INameStyle nameStyle;
	private String classpath;
	private String libDir;

	public AutoTableBindPlugin(IDataSourceProvider dataSourceProvider) {
		this(DbKit.MAIN_CONFIG_NAME, dataSourceProvider, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(String configName, IDataSourceProvider dataSourceProvider) {
		this(configName, dataSourceProvider, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(IDataSourceProvider dataSourceProvider, int transactionLevel) {
		this(DbKit.MAIN_CONFIG_NAME, dataSourceProvider, transactionLevel, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(String configName, IDataSourceProvider dataSourceProvider, int transactionLevel) {
		this(configName, dataSourceProvider, transactionLevel, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(IDataSourceProvider dataSourceProvider, INameStyle nameStyle) {
		super(DbKit.MAIN_CONFIG_NAME, dataSourceProvider);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(String configName, IDataSourceProvider dataSourceProvider, INameStyle nameStyle) {
		super(configName, dataSourceProvider);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(IDataSourceProvider dataSourceProvider, int transactionLevel, INameStyle nameStyle) {
		super(DbKit.MAIN_CONFIG_NAME, dataSourceProvider, transactionLevel);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(String configName, IDataSourceProvider dataSourceProvider, int transactionLevel, INameStyle nameStyle) {
		super(configName, dataSourceProvider, transactionLevel);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(DataSource dataSource) {
		this(DbKit.MAIN_CONFIG_NAME, dataSource, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(String configName, DataSource dataSource) {
		this(configName, dataSource, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(DataSource dataSource, int transactionLevel) {
		this(DbKit.MAIN_CONFIG_NAME, dataSource, transactionLevel, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(String configName, DataSource dataSource, int transactionLevel) {
		this(configName, dataSource, transactionLevel, SimpleNameStyles.DEFAULT);
	}

	public AutoTableBindPlugin(DataSource dataSource, INameStyle nameStyle) {
		super(DbKit.MAIN_CONFIG_NAME, dataSource);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(String configName, DataSource dataSource, INameStyle nameStyle) {
		super(configName, dataSource);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(DataSource dataSource, int transactionLevel, INameStyle nameStyle) {
		super(DbKit.MAIN_CONFIG_NAME, dataSource, transactionLevel);
		this.nameStyle = nameStyle;
	}

	public AutoTableBindPlugin(String configName, DataSource dataSource, int transactionLevel, INameStyle nameStyle) {
		super(configName, dataSource, transactionLevel);
		this.nameStyle = nameStyle;
	}

	/**
	 * 添加需要扫描的包，默认为扫描所有包
	 *
	 * @param packages
	 * @return
	 */
	public AutoTableBindPlugin setPackagesToScan(String... packages) {
		for (String pkg : packages) {
			packagesToScan.add(pkg.trim());
		}
		return this;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public AutoTableBindPlugin addExcludeClasses(Class<? extends Model>... clazzes) {
		for (Class<? extends Model> clazz : clazzes) {
			excludeClasses.add(clazz);
		}
		return this;
	}

	@SuppressWarnings("rawtypes")
	public AutoTableBindPlugin addExcludeClasses(List<Class<? extends Model>> clazzes) {
		if (clazzes != null) {
			excludeClasses.addAll(clazzes);
		}
		return this;
	}

	public AutoTableBindPlugin addJars(List<String> jars) {
		if (jars != null) {
			includeJars.addAll(jars);
		}
		return this;
	}

	public AutoTableBindPlugin addJars(String... jars) {
		if (jars != null) {
			for (String jar : jars) {
				includeJars.add(jar.trim());
			}
		}
		return this;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public boolean start() {
		//List<Class<? extends Model>> modelClasses = ClassSearcher.of(Model.class).libDir(libDir).classpath(classpath).packagesToScan(packagesToScan).injars(includeJars).includeAllJarsInLib(includeAllJarsInLib).search();
		List<Class<? extends Model>> modelClasses = ClassSearcher.of(BaseModel.class).libDir(libDir).classpath(classpath).packagesToScan(packagesToScan).injars(includeJars).includeAllJarsInLib(includeAllJarsInLib).scan();
		
		log.info("共找到ModelClass个数为：" + modelClasses.size());
		
		TableBind tb = null;
		for (Class modelClass : modelClasses) {
			if (excludeClasses.contains(modelClass)) {
				continue;
			}
			tb = (TableBind) modelClass.getAnnotation(TableBind.class);
			String tableName = null;
			//String arpConfName = Reflect.on(this).get("configName");
			if (tb == null) {
				if (!autoScan) {
					continue;
				}
				tableName = nameStyle.name(modelClass.getSimpleName());
				this.addMapping(tableName, modelClass);
				log.debug("Auto bindTable: addMapping(表名=" + tableName + " 实体类=" + modelClass.getName() + ")");
			} else {
				//String tbConfName = tb.configName();
				//if (StrKit.notBlank(tbConfName) && !tbConfName.equals(arpConfName))
					//continue;
				tableName = tb.tableName();
				if (StrKit.notBlank(tb.pkName())) {
					this.addMapping(tableName, tb.pkName(), modelClass);
					log.debug("Auto bindTable: addMapping(表名=" + tableName + " 主键=" + tb.pkName() + " 实体类=" + modelClass.getName() + ")");
				} else {
					this.addMapping(tableName, modelClass);
					log.debug("Auto bindTable: addMapping(表名=" + tableName + " 实体类=" + modelClass.getName() + ")");
				}
			}
		}
		return super.start();
	}

	@Override
	public boolean stop() {
		return super.stop();
	}

	public AutoTableBindPlugin autoScan(boolean autoScan) {
		this.autoScan = autoScan;
		return this;
	}

	public AutoTableBindPlugin classpath(String classpath) {
		this.classpath = classpath;
		return this;
	}

	public AutoTableBindPlugin libDir(String libDir) {
		this.libDir = libDir;
		return this;
	}

	public AutoTableBindPlugin includeAllJarsInLib(boolean includeAllJarsInLib) {
		this.includeAllJarsInLib = includeAllJarsInLib;
		return this;
	}

	public String name() {
		return "AutoTableBindPlugin插件";
	}
}
